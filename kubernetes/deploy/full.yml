apiVersion: apps/v1
kind: Deployment
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: gui
spec:
  selector:
    matchLabels:
      app: backman
      app.kubernetes.io/name: backman
      app.kubernetes.io/component: gui
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: backman
        app.kubernetes.io/name: backman
        app.kubernetes.io/component: gui
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: backman
      securityContext:
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
      containers:
      - name: backman
        image: jamesclonk/backman:latest
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
        ports:
        - containerPort: 8080
        command:
        - backman
        args:
        - -config
        - /backman/config.json
        env:
        - name: TZ
          value: Europe/Zurich
        - name: PORT
          value: "8080"
        - name: SERVICE_BINDING_ROOT
          value: /bindings
        resources:
          requests:
            memory: 1Gi
            cpu: 250m
          limits:
            memory: 2Gi
            cpu: 1000m
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
        livenessProbe:
          initialDelaySeconds: 15
          httpGet:
            path: /healthz
            port: 8080
        volumeMounts:
        - mountPath: /backman/config.json
          name: backman-secret
          subPath: config.json
        - mountPath: /bindings/my-postgres
          name: my-postgres
        - mountPath: /bindings/my-mysql
          name: my-mysql
        - mountPath: /bindings/my-mongodb
          name: my-mongodb
        - mountPath: /bindings/my-redis
          name: my-redis
        - mountPath: /bindings/my-elasticsearch
          name: my-elasticsearch
      volumes:
      - name: backman-secret
        secret:
          secretName: backman
      - name: my-postgres
        secret:
          secretName: my-postgres
      - name: my-mysql
        secret:
          secretName: my-mysql
      - name: my-mongodb
        secret:
          secretName: my-mongodb
      - name: my-redis
        secret:
          secretName: my-redis
      - name: my-elasticsearch
        secret:
          secretName: my-elasticsearch
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: lets-encrypt
spec:
  tls:
  - secretName: backman-tls
    hosts:
    - backman.swisscom.com
  rules:
  - host: backman.swisscom.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backman
            port:
              number: 8080
---
apiVersion: v1
kind: Namespace
metadata:
  name: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: namespace
    namespace.kubernetes.io/name: backman
  namespace: backman
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: netpol
spec:
  podSelector:
    matchLabels:
      app: backman
      app.kubernetes.io/name: backman
      app.kubernetes.io/component: gui
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: prometheus
      podSelector: {}
    ports:
    - port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          namespace.kubernetes.io/name: ingress-nginx
      podSelector: {}
    ports:
    - port: 8080
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: role
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - backman
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: role-binding
roleRef:
  kind: Role
  name: backman
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: backman
  namespace: backman
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes: []
  readOnlyRootFilesystem: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  seLinux:
    rule: RunAsAny
  runAsUser:
    rule: MustRunAs
    ranges:
    - min: 2000
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 2000
      max: 65535
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 2000
      max: 65535
---
apiVersion: v1
kind: Secret
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  config.json: |
    {
      "log_level": "info",
      "logging_timestamp": true,
      "disable_metrics_logging": true,
      "disable_health_logging": true,
      "unprotected_metrics": true,
      "unprotected_health": true,
      "username": "john",
      "password": "doe",
      "s3": {
        "service_label": "s3",
        "bucket_name": "my-s3-bucket-for-backups",
        "host": "s3.amazonaws.com",
        "access_key": "my-access-key",
        "secret_key": "my-secret-key"
      },
      "services": {
        "my-postgres": {
          "schedule": "0 0 2,18 * * *",
          "timeout": "2h",
          "retention": {
            "days": 21,
            "files": 111
          }
        },
        "my-mysql": {
          "schedule": "1 2 3 4 5 *",
          "timeout": "2h",
          "retention": {
            "days": 33,
            "files": 66
          }
        },
        "my-mongodb": {
          "schedule": "0 0 3 * * *",
          "timeout": "2h",
          "retention": {
            "days": 90,
            "files": 100
          }
        },
        "my-redis": {
          "schedule": "0 0 4 * * *",
          "timeout": "1h",
          "retention": {
            "days": 365,
            "files": 500
          }
        },
        "my-elasticsearch": {
          "schedule": "0 0 0 4,6 * *",
          "timeout": "6h",
          "retention": {
            "days": 2,
            "files": 5
          }
        }
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: my-postgres
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: my-postgres
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  name: my-postgres
  type: postgres
  provider: AWS RDS
  host: postgres.domain
  port: "5432"
  username: postgres_user
  password: postgres_passwd
  database: postgres_db
---
apiVersion: v1
kind: Secret
metadata:
  name: my-mysql
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: my-mysql
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  name: my-mysql
  type: mysql
  provider: AWS RDS
  host: mysql.domain
  port: "3306"
  username: mysql_user
  password: mysql_passwd
  database: mysql_db
---
apiVersion: v1
kind: Secret
metadata:
  name: my-mongodb
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: my-mongodb
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  name: my-mongodb
  type: mongodb
  provider: MongoDB Atlas
  uri: mongodb://mongodbadmin:super-secret@127.0.0.1:27017
---
apiVersion: v1
kind: Secret
metadata:
  name: my-redis
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: my-redis
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  name: my-redis
  type: redis
  provider: RedisEnterprise
  host: redis.domain
  port: "6379"
  password: redis_passwd
---
apiVersion: v1
kind: Secret
metadata:
  name: my-elasticsearch
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: my-elasticsearch
    app.kubernetes.io/component: secret
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
stringData:
  name: my-elasticsearch
  type: elasticsearch
  provider: Elastic Cloud
  host: https://my.elasticsearch.swisscom.com
  username: elasticsearch_user
  password: elasticsearch_passwd
---
apiVersion: v1
kind: Service
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: svc
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: gui
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backman
  namespace: backman
  labels:
    app: backman
    app.kubernetes.io/name: backman
    app.kubernetes.io/component: sa
