#@data/values
---
backman:
  image: "jamesclonk/backman:latest"

  pod_security_policy:
    enabled: true  # generates a k8s pod-security-policy if enabled

  network_policy:
    enabled: true # generates a k8s network-policy if enabled
    namespace_labels:
      ingress: # namespace matchLabels for ingress-controller access
        namespace.kubernetes.io/name: "ingress-nginx"
      prometheus: # namespace matchLabels for prometheus access
        namespace.kubernetes.io/name: "prometheus"

  ingress:
    enabled: true # generates a k8s nginx ingress resource if enabled
    hostname: "backman.swisscom.com" # hostname for k8s nginx ingress
    ingress_class: "nginx" # class of ingress controller
    cert_manager_tls:
      enabled: true # requires cert-manager.io to be installed for ingress TLS support to be enabled
      cluster_issuer: "lets-encrypt" # requires a cluster-issuer name if TLS is enabled

  username: "john" # HTTP Basic Auth username
  password: "doe" # HTTP Basic Auth password

  storage:
    s3:
      bucket: "my-s3-bucket-for-backups" # s3 bucket name
      host: "s3.amazonaws.com" # s3 hostname
      key: "my-access-key" # s3 access key
      secret: "my-secret-key" # s3 secret key

  # services require: name, type, provider, credentials, schedule, timeout and retention
  services:
  # service type 'postgres' requires credentials: host, port, database, username and password
  - name: "my-postgres"
    type: "postgres"
    provider: "AWS RDS"
    credentials:
      host: "postgres.domain"
      port: 5432
      database: "postgres_db"
      username: "postgres_user"
      password: "postgres_passwd"
    schedule: "0 0 2,18 * * *"
    timeout: "2h"
    retention:
      files: 111
      days: 21
  # service type 'mysql' requires credentials: host, port, database, username and password
  - name: "my-mysql"
    type: "mysql"
    provider: "AWS RDS"
    credentials:
      host: "mysql.domain"
      port: 3306
      database: "mysql_db"
      username: "mysql_user"
      password: "mysql_passwd"
    schedule: "1 2 3 4 5 *"
    timeout: "2h"
    retention:
      files: 66
      days: 33
  # service type 'mongodb' requires credentials: uri
  - name: "my-mongodb"
    type: "mongodb"
    provider: "MongoDB Atlas"
    credentials:
      uri: "mongodb://mongodbadmin:super-secret@127.0.0.1:27017"
    schedule: "0 0 3 * * *"
    timeout: "2h"
    retention:
      files: 100
      days: 90
  # service type 'redis' requires credentials: hostname, port and password
  - name: "my-redis"
    type: "redis"
    provider: "RedisEnterprise"
    credentials:
      host: "redis.domain"
      port: 6379
      password: "redis_passwd"
    schedule: "0 0 4 * * *"
    timeout: "1h"
    retention:
      files: 500
      days: 365
  # service type 'elasticsearch' requires credentials: host, username and password
  - name: "my-elasticsearch"
    type: "elasticsearch"
    provider: "Elastic Cloud"
    credentials:
      host: "https://my.elasticsearch.swisscom.com"
      username: "elasticsearch_user"
      password: "elasticsearch_passwd"
    schedule: "0 0 0 4,6 * *"
    timeout: "6h"
    retention:
      files: 5
      days: 2
