#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("_ytt.lib.yml", "labels", "check_credentials")

#@ if len(data.values.backman.username) == 0 or data.values.backman.username == "username":
#@  assert.fail("backman.username is missing or invalid")
#@ end
#@ if len(data.values.backman.password) == 0 or data.values.backman.password == "password":
#@  assert.fail("backman.password is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.bucket) == 0 or data.values.backman.storage.s3.bucket == "bucket":
#@  assert.fail("backman.storage.s3.bucket is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.host) == 0 or data.values.backman.storage.s3.host == "host":
#@  assert.fail("backman.storage.s3.host is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.key) == 0 or data.values.backman.storage.s3.key == "access_key":
#@  assert.fail("backman.storage.s3.key is missing or invalid")
#@ end
#@ if len(data.values.backman.storage.s3.secret) == 0 or data.values.backman.storage.s3.secret == "secret_key":
#@  assert.fail("backman.storage.s3.secret is missing or invalid")
#@ end
#@ if len(data.values.backman.services) == 0:
#@  assert.fail("backman.services are missing or invalid")
#@ end
#@ for idx in range(len(data.values.backman.services)):
#@   service = data.values.backman.services[idx]
#@   if len(service.name) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].name is missing")
#@   end
#@   if len(service.type) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].type is missing")
#@   end
#@   if len(service.schedule) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].schedule is missing")
#@   end
#@   if len(service.timeout) == 0:
#@     assert.fail("backman.services[" + str(idx) + "].timeout is missing")
#@   end
#@   if service.retention.days <= 0:
#@     assert.fail("backman.services[" + str(idx) + "].retention.days is missing")
#@   end
#@   if service.retention.files <= 0:
#@     assert.fail("backman.services[" + str(idx) + "].retention.files is missing")
#@   end
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: backman
  namespace: backman
  labels: #@ labels("backman","secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  config.json: |
    {
      "log_level": "info",
      "logging_timestamp": true,
      "disable_metrics_logging": true,
      "disable_health_logging": true,
      "unprotected_metrics": true,
      "unprotected_health": true,
      "username": "(@= data.values.backman.username @)",
      "password": "(@= data.values.backman.password @)",
      "s3": {
        "service_label": "s3",
        "bucket_name": "(@= data.values.backman.storage.s3.bucket @)",
        "host": "(@= data.values.backman.storage.s3.host @)",
        "access_key": "(@= data.values.backman.storage.s3.key @)",
        "secret_key": "(@= data.values.backman.storage.s3.secret @)"
      },
      "services": {
        (@- for idx in range(len(data.values.backman.services)): -@)
        (@- service = data.values.backman.services[idx] -@)
        (@- if idx > 0: -@),
        (@- end @)
        "(@= service.name @)": {
          "schedule": "(@= service.schedule @)",
          "timeout": "(@= service.timeout @)",
          "retention": {
            "days": (@= str(service.retention.days) @),
            "files": (@= str(service.retention.files) @)
          }
        }
        (@- end @)
      }
    }

#@ for idx in range(len(data.values.backman.services)):
#@   service = data.values.backman.services[idx]
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ service.name
  namespace: backman
  labels: #@ labels(service.name,"secret")
  annotations:
    kapp.k14s.io/versioned: ""
type: Opaque
#@yaml/text-templated-strings
stringData:
  #@ check_credentials(service)
  name: #@ service.name
  type: #@ service.type
  #@ if/end hasattr(service,"provider") and len(service.provider) > 0:
  provider: #@ service.provider
  #@ if/end hasattr(service.credentials,"host") and len(service.credentials.host) > 0:
  host: #@ service.credentials.host
  #@ if/end hasattr(service.credentials,"port") and int(service.credentials.port) > 0:
  port: #@ str(service.credentials.port)
  #@ if/end hasattr(service.credentials,"uri") and len(service.credentials.uri) > 0:
  uri: #@ service.credentials.uri
  #@ if/end hasattr(service.credentials,"username") and len(service.credentials.username) > 0:
  username: #@ service.credentials.username
  #@ if/end hasattr(service.credentials,"password") and len(service.credentials.password) > 0:
  password: #@ service.credentials.password
  #@ if/end hasattr(service.credentials,"database") and len(service.credentials.database) > 0:
  database: #@ service.credentials.database
#@ end
